#Then get average scanangle
#Scan angles ranged from around -30 to 30
#took the absolute to prevent negative/positive angles from cancelling out each other
#Slope could be a problem but here we don't have info to tackle it
avg_angle<-mean(abs(ScanAngleRank))
avg_angle<-avg_angle*pi/180 #Degrees to radians
#now extinction coefficient k
#The values come from the text in Campbell (1990), note that slightly different numbers were given in the abstract of the paper (1.774 instead of 1.744), but I presume the values in the text is the correct one
x<-2
k<-(x^2 + (tan(avg_angle)^2))^0.5 / (x + 1.744*(x+1.182)^(-0.733))
#Now combine everything together
PAI<-(-1) * log(1 - weighted_NR/ttl_rtn) * cos(avg_angle) / k
list(lidar_ePAI = PAI)
}
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(PAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(ePAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
h_cutoff
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(ePAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank,h_cutoff),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(ePAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
ePAI_f<-function(Z,ReturnNumber,NumberOfReturns,ScanAngleRank,h_cutoff){
#First get the variables related to gap fraction
weighted_NR<-data.frame(Z = Z,nrtn = NumberOfReturns)
weighted_NR<-weighted_NR[which(Z>h_cutoff),]
weighted_NR$nrtn = 1/weighted_NR$nrtn
weighted_NR<-sum(weighted_NR$nrtn) #Sum of weighted canopy returns
ttl_rtn<-length(which(ReturnNumber==1)) #Total number of first returns
#Then get average scanangle
#Scan angles ranged from around -30 to 30
#took the absolute to prevent negative/positive angles from cancelling out each other
#Slope could be a problem but here we don't have info to tackle it
avg_angle<-mean(abs(ScanAngleRank))
avg_angle<-avg_angle*pi/180 #Degrees to radians
#now extinction coefficient k
#The values come from the text in Campbell (1990), note that slightly different numbers were given in the abstract of the paper (1.774 instead of 1.744), but I presume the values in the text is the correct one
x<-2
k<-(x^2 + (tan(avg_angle)^2))^0.5 / (x + 1.744*(x+1.182)^(-0.733))
#Now combine everything together
PAI<-(-1) * log(1 - weighted_NR/ttl_rtn) * cos(avg_angle) / k
list(lidar_ePAI = PAI)
}
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank,h_cutoff),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(ePAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
terra::plot(r_list$lidar_ePAI)
L1<-lidR::filter_poi(las_nonground,Z<=L1_range[2] & Z>=L1_range[1])
L2<-lidR::filter_poi(las_nonground,Z<=L2_range[2] & Z>L2_range[1])
L3<-lidR::filter_poi(las_nonground,Z<=L3_range[2] & Z>L3_range[1])
if("lidar_vlayer_L1" %in% metric_names){
if(nrow(L1@data)!=0){
vlayer_L1<-lidR::voxel_metrics(L1,
eval(vox_expr),
res = vox_res)
vlayer_L1<-LAS(vlayer_L1)
vlayer_L1<-lidR::pixel_metrics(vlayer_L1,
~list(vlayer_L1=sum(vol)),
res = res)
vlayer_L1<-terra::resample(vlayer_L1,empty_raster)
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} else {
vlayer_L1<-empty_raster
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} #End of empty check
} #End of metric names check
if("lidar_vlayer_L2" %in% metric_names){
if(nrow(L2@data)!=0){
vlayer_L2<-lidR::voxel_metrics(L2,
eval(vox_expr),
res = vox_res)
vlayer_L2<-LAS(vlayer_L2)
vlayer_L2<-lidR::pixel_metrics(vlayer_L2,
~list(vlayer_L2=sum(vol)),
res = res)
vlayer_L2<-terra::resample(vlayer_L2,empty_raster)
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} else {
vlayer_L2<-empty_raster
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} #End of empty check
} #End of metric name check
if("lidar_vlayer_L1" %in% metric_names){
if(nrow(L1@data)!=0){
vlayer_L1<-lidR::voxel_metrics(L1,
eval(vox_expr),
res = vox_res)
vlayer_L1<-lidR::LAS(vlayer_L1)
vlayer_L1<-lidR::pixel_metrics(vlayer_L1,
~list(vlayer_L1=sum(vol)),
res = res)
vlayer_L1<-terra::resample(vlayer_L1,empty_raster)
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} else {
vlayer_L1<-empty_raster
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} #End of empty check
} #End of metric names check
if("lidar_vlayer_L2" %in% metric_names){
if(nrow(L2@data)!=0){
vlayer_L2<-lidR::voxel_metrics(L2,
eval(vox_expr),
res = vox_res)
vlayer_L2<-lidR::LAS(vlayer_L2)
vlayer_L2<-lidR::pixel_metrics(vlayer_L2,
~list(vlayer_L2=sum(vol)),
res = res)
vlayer_L2<-terra::resample(vlayer_L2,empty_raster)
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} else {
vlayer_L2<-empty_raster
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} #End of empty check
} #End of metric name check
if("lidar_vlayer_L3" %in% metric_names){
if(nrow(L3@data)!=0){
vlayer_L3<-lidR::voxel_metrics(L3,
eval(vox_expr),
res = vox_res)
vlayer_L3<-LAS(vlayer_L3)
vlayer_L3<-lidR::pixel_metrics(vlayer_L3,
~list(vlayer_L3=sum(vol)),
res = res)
vlayer_L3<-terra::resample(vlayer_L3,empty_raster)
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} else {
vlayer_L3<-empty_raster
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} #End of empty check
} #End of metric name check
if("lidar_vlayer_L3" %in% metric_names){
if(nrow(L3@data)!=0){
vlayer_L3<-lidR::voxel_metrics(L3,
eval(vox_expr),
res = vox_res)
vlayer_L3<-lidR::LAS(vlayer_L3)
vlayer_L3<-lidR::pixel_metrics(vlayer_L3,
~list(vlayer_L3=sum(vol)),
res = res)
vlayer_L3<-terra::resample(vlayer_L3,empty_raster)
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} else {
vlayer_L3<-empty_raster
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} #End of empty check
} #End of metric name check
meansd_names<-c("lidar_meanH_L1","lidar_sdH_L1","lidar_meanH_L2","lidar_sdH_L2","lidar_meanH_L3","lidar_sdH_L3")
if(sum(meansd_names %in% metric_names) >= 1){
#Define empty raster
empty_raster2<-c(empty_raster,empty_raster)
#Function
#L1
if(nrow(L1@data)!=0){
mean_sd_L1<-pixel_metrics(L1,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L1<-empty_raster2
}
#L2
if(nrow(L2@data)!=0){
mean_sd_L2<-pixel_metrics(L2,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L2<-empty_raster2
}
#L3
if(nrow(L3@data)!=0){
mean_sd_L3<-pixel_metrics(L3,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L3<-empty_raster2
}
mean_sd_L1<-terra::resample(mean_sd_L1,empty_raster)
mean_sd_L2<-terra::resample(mean_sd_L2,empty_raster)
mean_sd_L3<-terra::resample(mean_sd_L3,empty_raster)
names(mean_sd_L1)<-c("lidar_meanH_L1","lidar_sdH_L1")
names(mean_sd_L2)<-c("lidar_meanH_L2","lidar_sdH_L2")
names(mean_sd_L3)<-c("lidar_meanH_L3","lidar_sdH_L3")
mean_sd_L123<-c(mean_sd_L1,mean_sd_L2,mean_sd_L3)
mean_sd_L123<-mean_sd_L123[[meansd_names[which(meansd_names %in% metric_names)]]]
r_list$mean_sd_L123<-mean_sd_L123
} #End of metric name check
if(sum(meansd_names %in% metric_names) >= 1){
#Define empty raster
empty_raster2<-c(empty_raster,empty_raster)
#Function
#L1
if(nrow(L1@data)!=0){
mean_sd_L1<-lidR::pixel_metrics(L1,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L1<-empty_raster2
}
#L2
if(nrow(L2@data)!=0){
mean_sd_L2<-lidR::pixel_metrics(L2,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L2<-empty_raster2
}
#L3
if(nrow(L3@data)!=0){
mean_sd_L3<-lidR::pixel_metrics(L3,
res = res,
func = ~list(lidar_meanH = mean(Z,na.rm = T),
lidar_sdH = sd(Z,na.rm = T)))
} else {
mean_sd_L3<-empty_raster2
}
mean_sd_L1<-terra::resample(mean_sd_L1,empty_raster)
mean_sd_L2<-terra::resample(mean_sd_L2,empty_raster)
mean_sd_L3<-terra::resample(mean_sd_L3,empty_raster)
names(mean_sd_L1)<-c("lidar_meanH_L1","lidar_sdH_L1")
names(mean_sd_L2)<-c("lidar_meanH_L2","lidar_sdH_L2")
names(mean_sd_L3)<-c("lidar_meanH_L3","lidar_sdH_L3")
mean_sd_L123<-c(mean_sd_L1,mean_sd_L2,mean_sd_L3)
mean_sd_L123<-mean_sd_L123[[meansd_names[which(meansd_names %in% metric_names)]]]
r_list$mean_sd_L123<-mean_sd_L123
} #End of metric name check
empty_raster<-empty_raster[[1]]
bin_size_L1<-(L1_range[2]-L1_range[1])/5
bin_size_L2<-(L2_range[2]-L2_range[1])/5
vci_L1_exp<-substitute(~lidR::VCI(z,zmax,by),list(zmax = L1_range[2], by = bin_size_L1))
vci_L2_exp<-substitute(~lidR::VCI(z,zmax,by),list(zmax = L2_range[2], by = bin_size_L2))
vci_L3_exp<-substitute(~lidR::VCI(z,zmax,by),list(zmax = L3_range[2], by = bin_size_L2))
L1_VCI<-L1
colnames(L1_VCI@data)[colnames(L1_VCI@data)=="Z"]<-"z"
L2_VCI<-L2
colnames(L2_VCI@data)[colnames(L2_VCI@data)=="Z"]<-"z"
L3_VCI<-L3
colnames(L3_VCI@data)[colnames(L3_VCI@data)=="Z"]<-"z"
#L1
if("lidar_vci_L1" %in% metric_names){
if(nrow(L1@data)!=0){
vci_L1<-pixel_metrics(L1_VCI,func = eval(vci_L1_exp),res = res)
vci_L1<-terra::resample(vci_L1,empty_raster)
} else {
vci_L1<-empty_raster
}
names(vci_L1)<-"lidar_vci_L1"
r_list$lidar_vci_L1<-vci_L1
}
#L2
if("lidar_vci_L2" %in% metric_names){
if(nrow(L2@data)!=0){
vci_L2<-pixel_metrics(L2_VCI,func = eval(vci_L2_exp),res = res)
vci_L2<-terra::resample(vci_L2,empty_raster)
} else {
vci_L2<-empty_raster
}
names(vci_L2)<-"lidar_vci_L2"
r_list$lidar_vci_L2<-vci_L2
}
nrow(L1@data)!=0
#L1
if("lidar_vci_L1" %in% metric_names){
if(nrow(L1@data)!=0){
vci_L1<-lidR::pixel_metrics(L1_VCI,func = eval(vci_L1_exp),res = res)
vci_L1<-terra::resample(vci_L1,empty_raster)
} else {
vci_L1<-empty_raster
}
names(vci_L1)<-"lidar_vci_L1"
r_list$lidar_vci_L1<-vci_L1
}
terra::plot(r_list$lidar_vci_L1)
#L2
if("lidar_vci_L2" %in% metric_names){
if(nrow(L2@data)!=0){
vci_L2<-lidR::pixel_metrics(L2_VCI,func = eval(vci_L2_exp),res = res)
vci_L2<-terra::resample(vci_L2,empty_raster)
} else {
vci_L2<-empty_raster
}
names(vci_L2)<-"lidar_vci_L2"
r_list$lidar_vci_L2<-vci_L2
}
#L3
if("lidar_vci_L3" %in% metric_names){
if(nrow(L3@data)!=0){
vci_L3<-lidR::pixel_metrics(L3_VCI,func = eval(vci_L3_exp),res = res)
vci_L3<-terra::resample(vci_L3,empty_raster)
} else {
vci_L3<-empty_raster
}
names(vci_L3)<-"lidar_vci_L3"
r_list$lidar_vci_L3<-vci_L3
}
terra::plot(r_list$lidar_vci_L2)
final_names<-lapply(r_list,function(r){
return(terra::names(terra::rast(r)))
})
final_names<-do.call(c,final_names)
all_metrics<-terra::rast(r_list)
names(all_metrics)<-final_names
terra::plot(all_metrics)
terra::plot(all_metrics[[17:]])
terra::plot(all_metrics[[17:22]])
all_metrics
terra::plot(all_metrics[[23:30]])
terra::plot(all_metrics[[30:39]])
L1_range
L1<-lidR::filter_poi(las_nonground,Z<=L1_range[2] & Z>=L1_range[1])
summary(las_nonground@data$Z)
summary(las@data$Z)
hist(las@data$Z)
length(which(between(las@data$Z,0,1)))
library(dplyr)
length(which(between(las@data$Z,0,1)))
summary(las@data$Classification)
length(which(between(las@data$Z,0,1) & las@data$Classification==1))
length(which(between(las@data$Z,0.01,1) & las@data$Classification==1))
L1<-lidR::filter_poi(las_nonground,Z<=L1_range[2] & Z>=L1_range[1])
L1
L2
L1_range
length(which(between(las_nonground@data$Z,0,1)))
las_nonground<-lidR::filter_poi(las,Classification==1)
if("lidar_Tvolume" %in% metric_names){
if(nrow(las_nonground@data)==0){
#Empty point cloud
Tvolume<-empty_raster
names(Tvolume)<-"lidar_Tvolume"
r_list$Tvolume<-Tvolume
} else{
vox_expr<-substitute(~vox_f(vox_res),list(vox_res = vox_res))
las_vox<-lidR::voxel_metrics(las_nonground,
func = eval(vox_expr),
res = vox_res)
las_vox<-lidR::LAS(las_vox)
Tvolume<-lidR::pixel_metrics(las_vox,
~list(Tvolume = sum(vol)),
res = res)
Tvolume<-terra::resample(Tvolume,empty_raster)
names(Tvolume)<-"lidar_Tvolume"
r_list$Tvolume<-Tvolume
} #End of empty check
} #End of metrics name check
if("lidar_ePAI" %in% metric_names){
if(nrow(las@data)==0){
#Empty point cloud
ePAI<-empty_raster
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} else{
ePAI_expr<-substitute(~ePAI_f(Z,ReturnNumber,NumberOfReturns,ScanAngleRank,h_cutoff),list(h_cutoff = h_cutoff))
ePAI<-lidR::pixel_metrics(las,
func = eval(ePAI_expr),
res = res)
ePAI<-terra::resample(ePAI,empty_raster)
names(ePAI)<-"lidar_ePAI"
r_list$lidar_ePAI<-ePAI
} #End of empty check
} #End of name check
L1<-lidR::filter_poi(las_nonground,Z<=L1_range[2] & Z>=L1_range[1])
L2<-lidR::filter_poi(las_nonground,Z<=L2_range[2] & Z>L2_range[1])
L3<-lidR::filter_poi(las_nonground,Z<=L3_range[2] & Z>L3_range[1])
L1
if("lidar_vlayer_L1" %in% metric_names){
if(nrow(L1@data)!=0){
vlayer_L1<-lidR::voxel_metrics(L1,
eval(vox_expr),
res = vox_res)
vlayer_L1<-lidR::LAS(vlayer_L1)
vlayer_L1<-lidR::pixel_metrics(vlayer_L1,
~list(vlayer_L1=sum(vol)),
res = res)
vlayer_L1<-terra::resample(vlayer_L1,empty_raster)
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} else {
vlayer_L1<-empty_raster
names(vlayer_L1)<-"lidar_vlayer_L1"
r_list$vlayer_L1<-vlayer_L1
} #End of empty check
} #End of metric names check
if("lidar_vlayer_L2" %in% metric_names){
if(nrow(L2@data)!=0){
vlayer_L2<-lidR::voxel_metrics(L2,
eval(vox_expr),
res = vox_res)
vlayer_L2<-lidR::LAS(vlayer_L2)
vlayer_L2<-lidR::pixel_metrics(vlayer_L2,
~list(vlayer_L2=sum(vol)),
res = res)
vlayer_L2<-terra::resample(vlayer_L2,empty_raster)
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} else {
vlayer_L2<-empty_raster
names(vlayer_L2)<-"lidar_vlayer_L2"
r_list$vlayer_L2<-vlayer_L2
} #End of empty check
} #End of metric name check
if("lidar_vlayer_L3" %in% metric_names){
if(nrow(L3@data)!=0){
vlayer_L3<-lidR::voxel_metrics(L3,
eval(vox_expr),
res = vox_res)
vlayer_L3<-lidR::LAS(vlayer_L3)
vlayer_L3<-lidR::pixel_metrics(vlayer_L3,
~list(vlayer_L3=sum(vol)),
res = res)
vlayer_L3<-terra::resample(vlayer_L3,empty_raster)
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} else {
vlayer_L3<-empty_raster
names(vlayer_L3)<-"lidar_vlayer_L3"
r_list$vlayer_L3<-vlayer_L3
} #End of empty check
} #End of metric name check
devtools::document
devtools::document()
install.packages("devtools")
library(devtools)
devtools::document()
devtools::document()
install.packages("moments")
library(moments)
